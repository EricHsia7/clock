{"version":3,"file":"22e74714d83f53b41ee9.min.js","mappings":"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","sources":["webpack://clock/./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-consumer.js","webpack://clock/./node_modules/stacktrace-gps/node_modules/source-map/lib/source-map-generator.js","webpack://clock/./node_modules/stacktrace-gps/node_modules/source-map/lib/source-node.js","webpack://clock/./node_modules/stacktrace-gps/node_modules/source-map/lib/util.js","webpack://clock/./node_modules/stacktrace-gps/node_modules/source-map/source-map.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are removed from this array, by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var shiftNextLine = function() {\n      var lineContents = remainingLines.shift();\n      // The last line of a file might not have a newline.\n      var newLine = remainingLines.shift() || \"\";\n      return lineContents + newLine;\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[0];\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[0];\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLines.length > 0) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n","/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n"],"names":["util","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","sourceMap","JSON","parse","replace","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","version","getArg","sources","names","sourceRoot","sourcesContent","mappings","file","this","_version","Error","map","String","normalize","source","isAbsolute","relative","_names","fromArray","_sources","_mappings","Mapping","generatedLine","generatedColumn","originalLine","originalColumn","name","lastOffset","line","column","_sections","s","url","offset","offsetLine","offsetColumn","generatedOffset","consumer","fromSourceMap","prototype","__generatedMappings","Object","defineProperty","get","_parseMappings","__originalMappings","_charIsMappingSeparator","aStr","index","c","charAt","aSourceRoot","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","aCallback","aContext","aOrder","context","_generatedMappings","_originalMappings","mapping","at","join","forEach","allGeneratedPositionsFor","aArgs","needle","has","indexOf","_findMapping","compareByOriginalPositions","undefined","push","lastColumn","exports","create","smc","toArray","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","i","length","srcMapping","destMapping","str","segment","end","value","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","decode","rest","compareByGeneratedPositionsDeflated","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","hasContentsOfAllSources","size","some","sc","sourceContentFor","aSource","nullOnMissing","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","constructor","j","sectionIndex","section","cmp","bias","every","content","generatedPosition","sectionMappings","add","adjustedMapping","MappingList","SourceMapGenerator","_skipValidation","_sourcesContents","aSourceMapConsumer","generator","newMapping","generated","original","addMapping","sourceFile","setSourceContent","_validateMapping","aSourceFile","aSourceContent","toSetString","keys","applySourceMap","aSourceMapPath","newSources","newNames","unsortedForEach","aGenerated","aOriginal","aName","stringify","_serializeMappings","next","nameIdx","sourceIdx","previousGeneratedLine","result","len","compareByGeneratedPositionsInflated","encode","aSources","key","hasOwnProperty","call","toJSON","toString","REGEX_NEWLINE","isSourceNode","SourceNode","aLine","aColumn","aChunks","children","sourceContents","fromStringWithSourceMap","aGeneratedCode","aRelativePath","node","remainingLines","split","shiftNextLine","shift","lastGeneratedLine","lastMapping","code","nextLine","substr","addMappingWithCode","aChunk","Array","isArray","chunk","prepend","unshift","walk","aFn","aSep","newChildren","replaceRight","aPattern","aReplacement","lastChild","walkSourceContents","fromSetString","toStringWithSourceMap","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","idx","charCodeAt","sourceContent","aDefaultValue","arguments","urlRegexp","dataUrlRegexp","aUrl","match","auth","host","port","urlGenerate","aParsedUrl","aPath","part","parts","up","splice","aRoot","aPathUrl","aRootUrl","joined","level","lastIndexOf","supportsNullProto","identity","isProtoString","strcmp","aStr1","aStr2","mappingA","mappingB","onlyCompareOriginal","onlyCompareGenerated"],"sourceRoot":""}